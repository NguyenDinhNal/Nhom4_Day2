
Nhom4_Day2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003fc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000590  08000590  00001598  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000590  08000590  00001598  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00001590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000598  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000598  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017d5  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058b  00000000  00000000  00002d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00003328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004a  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001edc  00000000  00000000  00003602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015e5  00000000  00000000  000054de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003ba05  00000000  00000000  00006ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  000424c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  00042588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00043050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000200  00000000  00000000  000430b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000578 	.word	0x08000578

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000578 	.word	0x08000578

080001d4 <Buzzer_Init>:
#define BUTTON_GPIO_PIN GPIO_Pin_4
#define BUTTON_B2 4
#define BUTTONControl_SetClock RCC_AHB1Periph_GPIOB

static void Buzzer_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 80001da:	2101      	movs	r1, #1
 80001dc:	2004      	movs	r0, #4
 80001de:	f000 f987 	bl	80004f0 <RCC_AHB1PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 80001e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001e6:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001e8:	2301      	movs	r3, #1
 80001ea:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001ec:	2302      	movs	r3, #2
 80001ee:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001f0:	2300      	movs	r3, #0
 80001f2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80001f4:	2302      	movs	r3, #2
 80001f6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4619      	mov	r1, r3
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <Buzzer_Init+0x38>)
 80001fe:	f000 f8e8 	bl	80003d2 <GPIO_Init>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40020800 	.word	0x40020800

08000210 <Button_Init>:

static void Button_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	2002      	movs	r0, #2
 800021a:	f000 f969 	bl	80004f0 <RCC_AHB1PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 800021e:	2310      	movs	r3, #16
 8000220:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000222:	2300      	movs	r3, #0
 8000224:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000226:	2302      	movs	r3, #2
 8000228:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800022a:	2301      	movs	r3, #1
 800022c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 800022e:	463b      	mov	r3, r7
 8000230:	4619      	mov	r1, r3
 8000232:	4803      	ldr	r0, [pc, #12]	@ (8000240 <Button_Init+0x30>)
 8000234:	f000 f8cd 	bl	80003d2 <GPIO_Init>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40020400 	.word	0x40020400

08000244 <ButtonRead_Status>:

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint32_t GPIO_PIN)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
    uint32_t Read_Pin;

    Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	691a      	ldr	r2, [r3, #16]
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	fa22 f303 	lsr.w	r3, r2, r3
 8000258:	60fb      	str	r3, [r7, #12]
    Read_Pin = Read_Pin & 0x01;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	60fb      	str	r3, [r7, #12]

    return Read_Pin;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	b2db      	uxtb	r3, r3
}
 8000266:	4618      	mov	r0, r3
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <BuzzerControl_SetStatus>:

static void BuzzerControl_SetStatus(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 8000272:	b480      	push	{r7}
 8000274:	b083      	sub	sp, #12
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	460b      	mov	r3, r1
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	4613      	mov	r3, r2
 8000280:	70bb      	strb	r3, [r7, #2]
    if (Status == GPIO_PIN_SET)
 8000282:	78bb      	ldrb	r3, [r7, #2]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d10d      	bne.n	80002a4 <BuzzerControl_SetStatus+0x32>
    {
        GPIOx->BSRRL |= 1 << GPIO_PIN;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	8b1b      	ldrh	r3, [r3, #24]
 800028c:	b29b      	uxth	r3, r3
 800028e:	b21a      	sxth	r2, r3
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2101      	movs	r1, #1
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	b21b      	sxth	r3, r3
 800029a:	4313      	orrs	r3, r2
 800029c:	b21b      	sxth	r3, r3
 800029e:	b29a      	uxth	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	831a      	strh	r2, [r3, #24]
    }
    if (Status == GPIO_PIN_RESET)
 80002a4:	78bb      	ldrb	r3, [r7, #2]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d10d      	bne.n	80002c6 <BuzzerControl_SetStatus+0x54>
    {
        GPIOx->BSRRH |= 1 << GPIO_PIN;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	8b5b      	ldrh	r3, [r3, #26]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	78fb      	ldrb	r3, [r7, #3]
 80002b4:	2101      	movs	r1, #1
 80002b6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	4313      	orrs	r3, r2
 80002be:	b21b      	sxth	r3, r3
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	835a      	strh	r2, [r3, #26]
    }
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <Buzzer_Toggle>:

static void Buzzer_Toggle(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	460b      	mov	r3, r1
 80002dc:	70fb      	strb	r3, [r7, #3]
    if(GPIOx->ODR & (1 << GPIO_PIN))
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	78fa      	ldrb	r2, [r7, #3]
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	4013      	ands	r3, r2
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d006      	beq.n	80002fe <Buzzer_Toggle+0x2c>
    {
        BuzzerControl_SetStatus(GPIOx, GPIO_PIN, GPIO_PIN_RESET);
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ffbb 	bl	8000272 <BuzzerControl_SetStatus>
    }
    else
    {
        BuzzerControl_SetStatus(GPIOx, GPIO_PIN, GPIO_PIN_SET);
    }
}
 80002fc:	e005      	b.n	800030a <Buzzer_Toggle+0x38>
        BuzzerControl_SetStatus(GPIOx, GPIO_PIN, GPIO_PIN_SET);
 80002fe:	78fb      	ldrb	r3, [r7, #3]
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ffb4 	bl	8000272 <BuzzerControl_SetStatus>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <main>:

int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
    uint8_t buttonState = 1;      // Current button state
 800031a:	2301      	movs	r3, #1
 800031c:	71bb      	strb	r3, [r7, #6]
    uint8_t lastButtonState = 1;  // Previous button state
 800031e:	2301      	movs	r3, #1
 8000320:	71fb      	strb	r3, [r7, #7]
    uint8_t buzzerState = 0;      // Current buzzer state
 8000322:	2300      	movs	r3, #0
 8000324:	717b      	strb	r3, [r7, #5]

    Buzzer_Init();
 8000326:	f7ff ff55 	bl	80001d4 <Buzzer_Init>
    Button_Init();
 800032a:	f7ff ff71 	bl	8000210 <Button_Init>

    // Initial state - buzzer off
    BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2109      	movs	r1, #9
 8000332:	4810      	ldr	r0, [pc, #64]	@ (8000374 <main+0x60>)
 8000334:	f7ff ff9d 	bl	8000272 <BuzzerControl_SetStatus>
    while (1)
        {
            // Read the button state
            buttonState = ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B2);
 8000338:	2104      	movs	r1, #4
 800033a:	480f      	ldr	r0, [pc, #60]	@ (8000378 <main+0x64>)
 800033c:	f7ff ff82 	bl	8000244 <ButtonRead_Status>
 8000340:	4603      	mov	r3, r0
 8000342:	71bb      	strb	r3, [r7, #6]

            // Check for button press (falling edge)
            if (buttonState == 0 && lastButtonState == 1)
 8000344:	79bb      	ldrb	r3, [r7, #6]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d110      	bne.n	800036c <main+0x58>
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d10d      	bne.n	800036c <main+0x58>
            {
                // Toggle the buzzer state
                Buzzer_Toggle(BUZZER_GPIO_PORT, BUZZER_PIN9);
 8000350:	2109      	movs	r1, #9
 8000352:	4808      	ldr	r0, [pc, #32]	@ (8000374 <main+0x60>)
 8000354:	f7ff ffbd 	bl	80002d2 <Buzzer_Toggle>

                // Simple debounce delay
                for(volatile uint32_t i = 0; i < 100000; i++);
 8000358:	2300      	movs	r3, #0
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	e002      	b.n	8000364 <main+0x50>
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	4a05      	ldr	r2, [pc, #20]	@ (800037c <main+0x68>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d9f8      	bls.n	800035e <main+0x4a>
            }

            // Update the last button state
            lastButtonState = buttonState;
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	71fb      	strb	r3, [r7, #7]
            buttonState = ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B2);
 8000370:	e7e2      	b.n	8000338 <main+0x24>
 8000372:	bf00      	nop
 8000374:	40020800 	.word	0x40020800
 8000378:	40020400 	.word	0x40020400
 800037c:	0001869f 	.word	0x0001869f

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	@ (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	@ (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f8bf 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ffaf 	bl	8000314 <main>

080003b6 <LoopForever>:

LoopForever:
  b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>

080003d2 <GPIO_Init>:
 80003d2:	b480      	push	{r7}
 80003d4:	b087      	sub	sp, #28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e076      	b.n	80004dc <GPIO_Init+0x10a>
 80003ee:	2201      	movs	r2, #1
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	693a      	ldr	r2, [r7, #16]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	429a      	cmp	r2, r3
 8000408:	d165      	bne.n	80004d6 <GPIO_Init+0x104>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	2103      	movs	r1, #3
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	4619      	mov	r1, r3
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	431a      	orrs	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d003      	beq.n	8000448 <GPIO_Init+0x76>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d12e      	bne.n	80004a6 <GPIO_Init+0xd4>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	2103      	movs	r1, #3
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	43db      	mvns	r3, r3
 8000458:	401a      	ands	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	4619      	mov	r1, r3
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	b29b      	uxth	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	2301      	movs	r3, #1
 8000482:	408b      	lsls	r3, r1
 8000484:	43db      	mvns	r3, r3
 8000486:	401a      	ands	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	683a      	ldr	r2, [r7, #0]
 8000492:	7992      	ldrb	r2, [r2, #6]
 8000494:	4611      	mov	r1, r2
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	b292      	uxth	r2, r2
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	b292      	uxth	r2, r2
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	79db      	ldrb	r3, [r3, #7]
 80004c6:	4619      	mov	r1, r3
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	431a      	orrs	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d985      	bls.n	80003ee <GPIO_Init+0x1c>
 80004e2:	bf00      	nop
 80004e4:	371c      	adds	r7, #28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <RCC_AHB1PeriphClockCmd>:
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <RCC_AHB1PeriphClockCmd+0x20>
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000506:	4909      	ldr	r1, [pc, #36]	@ (800052c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4313      	orrs	r3, r2
 800050c:	630b      	str	r3, [r1, #48]	@ 0x30
 800050e:	e006      	b.n	800051e <RCC_AHB1PeriphClockCmd+0x2e>
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	43db      	mvns	r3, r3
 8000518:	4904      	ldr	r1, [pc, #16]	@ (800052c <RCC_AHB1PeriphClockCmd+0x3c>)
 800051a:	4013      	ands	r3, r2
 800051c:	630b      	str	r3, [r1, #48]	@ 0x30
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4d0d      	ldr	r5, [pc, #52]	@ (8000568 <__libc_init_array+0x38>)
 8000534:	4c0d      	ldr	r4, [pc, #52]	@ (800056c <__libc_init_array+0x3c>)
 8000536:	1b64      	subs	r4, r4, r5
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	2600      	movs	r6, #0
 800053c:	42a6      	cmp	r6, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	4d0b      	ldr	r5, [pc, #44]	@ (8000570 <__libc_init_array+0x40>)
 8000542:	4c0c      	ldr	r4, [pc, #48]	@ (8000574 <__libc_init_array+0x44>)
 8000544:	f000 f818 	bl	8000578 <_init>
 8000548:	1b64      	subs	r4, r4, r5
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	2600      	movs	r6, #0
 800054e:	42a6      	cmp	r6, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f855 3b04 	ldr.w	r3, [r5], #4
 8000558:	4798      	blx	r3
 800055a:	3601      	adds	r6, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000562:	4798      	blx	r3
 8000564:	3601      	adds	r6, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	08000590 	.word	0x08000590
 800056c:	08000590 	.word	0x08000590
 8000570:	08000590 	.word	0x08000590
 8000574:	08000594 	.word	0x08000594

08000578 <_init>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr

08000584 <_fini>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr
